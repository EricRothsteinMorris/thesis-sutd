% $ biblatex auxiliary file $
% $ biblatex bbl format version 3.1 $
% Do not modify the above lines!
%
% This is an auxiliary file used by the 'biblatex' package.
% This file may safely be deleted. It will be recreated as
% required.
%
\begingroup
\makeatletter
\@ifundefined{ver@biblatex.sty}
  {\@latex@error
     {Missing 'biblatex' package}
     {The bibliography requires the 'biblatex' package.}
      \aftergroup\endinput}
  {}
\endgroup

\datalist[entry]{nyt/global//global/global}
  \entry{ROP}{inproceedings}{}
    \name{author}{4}{}{%
      {{hash=BE}{%
         family={Buchanan},
         familyi={B\bibinitperiod},
         given={Erik},
         giveni={E\bibinitperiod},
      }}%
      {{hash=RR}{%
         family={Roemer},
         familyi={R\bibinitperiod},
         given={Ryan},
         giveni={R\bibinitperiod},
      }}%
      {{hash=SH}{%
         family={Shacham},
         familyi={S\bibinitperiod},
         given={Hovav},
         giveni={H\bibinitperiod},
      }}%
      {{hash=SS}{%
         family={Savage},
         familyi={S\bibinitperiod},
         given={Stefan},
         giveni={S\bibinitperiod},
      }}%
    }
    \list{publisher}{1}{%
      {Association for Computing Machinery}%
    }
    \keyw{SPARC, return-into-libc, RISC, return-oriented programming}
    \strng{namehash}{BE+1}
    \strng{fullhash}{BERRSHSS1}
    \field{labelnamesource}{author}
    \field{labeltitlesource}{title}
    \field{labelyear}{2008}
    \field{labeldatesource}{}
    \field{sortinit}{B}
    \field{sortinithash}{B}
    \field{abstract}{%
    This paper reconsiders the threat posed by Shacham's "return-oriented
  programming" -- a technique by which W-xor-X-style hardware protections are
  evaded via carefully crafted stack frames that divert control flow into the
  middle of existing variable-length x86 instructions -- creating short new
  instructions streams that then return. We believe this attack is both more
  general and a greater threat than the author appreciated. In fact, the
  vulnerability is not limited to the x86 architecture or any particular
  operating system, is readily exploitable, and bypasses an entire category of
  malware protections. In this paper we demonstrate general return-oriented
  programming on the SPARC, a fixed instruction length RISC architecture with
  structured control flow. We construct a Turing-complete library of code
  gadgets using snippets of the Solaris libc, a general purpose programming
  language, and a compiler for constructing return-oriented exploits. Finally,
  we argue that the threat posed by return-oriented programming, across all
  architectures and systems, has negative implications for an entire class of
  security mechanisms: those that seek to prevent malicious computation by
  preventing the execution of malicious code.%
    }
    \field{booktitle}{Proceedings of the 15th ACM Conference on Computer and
  Communications Security}
    \verb{doi}
    \verb 10.1145/1455770.1455776
    \endverb
    \field{isbn}{9781595938107}
    \field{pages}{27â€“38}
    \field{series}{CCS '08}
    \field{title}{When Good Instructions Go Bad: Generalizing Return-Oriented
  Programming to RISC}
    \verb{url}
    \verb https://doi.org/10.1145/1455770.1455776
    \endverb
    \list{location}{1}{%
      {Alexandria, Virginia, USA}%
    }
    \field{year}{2008}
    \warn{\item Can't use 'location' + 'address'}
  \endentry
\enddatalist
\endinput
