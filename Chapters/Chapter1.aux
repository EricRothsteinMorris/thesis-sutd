\relax 
\providecommand\hyper@newdestlabel[2]{}
\@writefile{toc}{\contentsline {chapter}{\numberline {4}Side-Channel Repair}{14}{chapter.107}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{ChapterGKAT}{{4}{14}{Side-Channel Repair}{chapter.107}{}}
\@writefile{toc}{\contentsline {section}{\numberline {4.1}General Idea}{14}{section.108}}
\@writefile{toc}{\contentsline {section}{\numberline {4.2}Related work and how do we distinguish from them}{14}{section.109}}
\@writefile{tdo}{\contentsline {todo}{prove this?}{14}{section*.110}}
\@writefile{toc}{\contentsline {section}{\numberline {4.3}CTP (Cryptocoding) Axioms, and our solution}{14}{section.111}}
\@writefile{tdo}{\contentsline {todo}{read blog}{16}{section*.112}}
\@writefile{toc}{\contentsline {section}{\numberline {4.4}Formalisation}{16}{section.113}}
\@writefile{toc}{\contentsline {paragraph}{}{17}{section*.114}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.4.1}Language-Based Semantics CTP}{17}{subsection.115}}
\@writefile{tdo}{\contentsline {todo}{Here is where you explain what the semantics of GKAT expressions are in terms of guarded strings, and you say that infinite loops yield an empty language, which is super weird, right?}{17}{section*.117}}
\@writefile{tdo}{\contentsline {todo}{Are there relevant cases where this is not true? Answer: actually, the memory footprint may probably be one of these cases (more precisely, memory footprint should also consider the interaction environment in shared caches... it can get really complicated if we want to model everything...)}{17}{section*.120}}
\@writefile{toc}{\contentsline {section}{\numberline {4.5}The IMP Language}{19}{section.131}}
\@writefile{toc}{\contentsline {section}{\numberline {4.6}Memory Footprint for the IMP Language}{19}{section.133}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.6.1}Secure Constant Memory}{19}{subsection.134}}
\@writefile{toc}{\contentsline {section}{\numberline {4.7}The IMP Language with Division}{20}{section.135}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.7.1}Examples of Side Channel Attacks}{20}{subsection.137}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.7.2}Transformations Rules for CTP in IMP}{20}{subsection.138}}
\@writefile{tdo}{\contentsline {todo}{The programmer should tell us somehow how many times we unwind each loop that depends on a secret. FaCT forces loops to be of the form ``for x from e to e'' to fix iteration increments so they know how to unwind.}{21}{section*.142}}
\@writefile{toc}{\contentsline {section}{\numberline {4.8}Taint Analysis}{22}{section.143}}
\@writefile{tdo}{\contentsline {todo}{Here is an interesting problem: if we have a non-security critical section (e.g., a loop that does not depend on secret) inside a section we are applying linearisation, do we need to linearise it? Probably not! The problem is that this is not compatible with our current implementation, because the current implementation linearises everything. If we introduce breakpoints we can allow loops in the branches.}{22}{section*.144}}
\@writefile{toc}{\contentsline {section}{\numberline {4.9}The Enforcement Algorithm}{22}{section.145}}
\@writefile{tdo}{\contentsline {todo}{Resolve $k$}{22}{section*.146}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.9.1}Premises Behind the Enforcement Algorithm}{22}{subsection.147}}
\@writefile{tdo}{\contentsline {todo}{This is just my intuition, but I would like to get empirical evidence.}{23}{section*.148}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.9.2}An LLVM Primer}{23}{subsection.149}}
\@writefile{tdo}{\contentsline {todo}{A figure/example may help?}{23}{section*.150}}
\@writefile{tdo}{\contentsline {todo}{Dominator/Postdominator}{23}{section*.151}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.9.3}The \texttt  {Linearise} Algorithm}{23}{subsection.152}}
\@writefile{tdo}{\contentsline {todo}{Why don't we try to describe the algorithm considering loops? It's going to be a fun exercise.}{23}{section*.153}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.9.4}A Premise for Efficient Repaired Code}{23}{subsection.156}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {1}{\ignorespaces Linearisation algorithm\relax }}{24}{algorithm.154}}
\newlabel{Linearisation}{{1}{24}{Linearisation algorithm\relax }{algorithm.154}{}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {2}{\ignorespaces Euclid's algorithm\relax }}{24}{algorithm.155}}
\newlabel{euclid}{{2}{24}{Euclid's algorithm\relax }{algorithm.155}{}}
\newlabel{euclidendwhile}{{7}{24}{Euclid's algorithm\relax }{algorithm.155}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.9.5}Enforcing Safe Behaviour}{25}{subsection.157}}
\@writefile{tdo}{\contentsline {todo}{I originally thought that this section should be part of the GKAT rules, but after some consideration, if we were to assume that sanitisation is part of the actions (i.e. is a part of CTP practices), then this section becomes largely irrelevant for the theory. However, since LLVM can have problems when accessing arrays or dividing by zero, this should be mentioned in the LLVM section, probably.}{25}{section*.158}}
\@writefile{tdo}{\contentsline {todo}{OR}{25}{section*.160}}
\@writefile{tdo}{\contentsline {todo}{I have the hunch that substituting the expression $A[x]$ for $ A[x\textbf  { mod }(\textbf  {size}(A))]$ might leak via memory SC that the secret is a multiple of the array index that corresponds to $x\textbf  { mod }(\textbf  {size}(A))$. However, this substitution for $A[0]$ also leaks that the secret is greater than the size of the array. Now, using a secret as an index should be frowned upon by CTP guidelines, but do we want to define the problem away? probably not. What this is missing is the memory SC mitigation, and any of the options above should be valid.}{25}{section*.161}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.9.6}A GKAT to Correctly Unwind Basic Block Loops}{26}{subsection.162}}
\@writefile{tdo}{\contentsline {todo}{The objective of this section is to provide the background theory to prove that the loop transformation that we use in the CFG corresponds to an unwinding transformation of GKAT iteration expressions. For that, we show that the CFG of an LLVM IR program models a normal GKAT coalgebra. If that is the case, then, from a normal GKAT coalgebra, we can use Kleene's theorem for GKAT to obtain a GKAT expression that models the program. Once we have the GKAT expression, we can unwind loops using $k$-truncation. Somehow, this should be equivalent to unwinding a loop in the CFG (even if the loop has multiple exit points). If I am not mistaken, we want to identify two blocks: the header block and the merging block of the loop. The header is unique by definition, but the merging block is the postdominator of all exiting blocks in the loops, and that is what we will end up iterating using GKAT iteration. }{26}{section*.163}}
\@writefile{tdo}{\contentsline {todo}{The $\texttt  {branch}$ instruction can be generalised to a $\texttt  {switch}$ instruction, but we work with binary branching since it is possible to express a switch associating on the right, so we go o a basic block on the else branch that continues resolving the cases of the switch following the classical \texttt  {switch $g_i:c_i$ $\equiv $ if $g_1$ then $c_1$ elseif $g_2$ then $c_2$ elseif...} equivalence that most decent programming languages have (which is why I never use switches in C++, since they are not equivalent).}{26}{section*.166}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.9.7}Types}{26}{subsection.167}}
\@writefile{tdo}{\contentsline {todo}{Set Notation}{27}{section*.168}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.9.8}Instructions}{27}{subsection.172}}
\@writefile{tdo}{\contentsline {todo}{Overflows}{27}{section*.173}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.9.9}Central idea}{27}{subsection.174}}
\@writefile{tdo}{\contentsline {todo}{what is it?}{27}{section*.175}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.9.10}Subsection 1}{27}{subsection.176}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.9.11}Subsection 2}{27}{subsection.177}}
\@writefile{toc}{\contentsline {section}{\numberline {4.10}Main Section 2}{28}{section.178}}
\@setckpt{Chapters/Chapter1}{
\setcounter{page}{29}
\setcounter{equation}{11}
\setcounter{enumi}{2}
\setcounter{enumii}{0}
\setcounter{enumiii}{0}
\setcounter{enumiv}{0}
\setcounter{footnote}{0}
\setcounter{mpfootnote}{0}
\setcounter{part}{0}
\setcounter{chapter}{4}
\setcounter{section}{10}
\setcounter{subsection}{0}
\setcounter{subsubsection}{0}
\setcounter{paragraph}{0}
\setcounter{subparagraph}{0}
\setcounter{figure}{0}
\setcounter{table}{0}
\setcounter{LT@tables}{0}
\setcounter{LT@chunks}{0}
\setcounter{ContinuedFloat}{0}
\setcounter{tabx@nest}{0}
\setcounter{listtotal}{0}
\setcounter{listcount}{0}
\setcounter{liststart}{0}
\setcounter{liststop}{0}
\setcounter{citecount}{0}
\setcounter{citetotal}{0}
\setcounter{multicitecount}{0}
\setcounter{multicitetotal}{0}
\setcounter{instcount}{0}
\setcounter{maxnames}{3}
\setcounter{minnames}{1}
\setcounter{maxitems}{3}
\setcounter{minitems}{1}
\setcounter{citecounter}{0}
\setcounter{savedcitecounter}{0}
\setcounter{uniquelist}{0}
\setcounter{uniquename}{0}
\setcounter{refsection}{0}
\setcounter{refsegment}{0}
\setcounter{maxextratitle}{0}
\setcounter{maxextratitleyear}{0}
\setcounter{maxextrayear}{0}
\setcounter{maxextraalpha}{0}
\setcounter{abbrvpenalty}{50}
\setcounter{highnamepenalty}{50}
\setcounter{lownamepenalty}{25}
\setcounter{maxparens}{3}
\setcounter{parenlevel}{0}
\setcounter{mincomprange}{10}
\setcounter{maxcomprange}{100000}
\setcounter{mincompwidth}{1}
\setcounter{afterword}{0}
\setcounter{savedafterword}{0}
\setcounter{annotator}{0}
\setcounter{savedannotator}{0}
\setcounter{author}{0}
\setcounter{savedauthor}{0}
\setcounter{bookauthor}{0}
\setcounter{savedbookauthor}{0}
\setcounter{commentator}{0}
\setcounter{savedcommentator}{0}
\setcounter{editor}{0}
\setcounter{savededitor}{0}
\setcounter{editora}{0}
\setcounter{savededitora}{0}
\setcounter{editorb}{0}
\setcounter{savededitorb}{0}
\setcounter{editorc}{0}
\setcounter{savededitorc}{0}
\setcounter{foreword}{0}
\setcounter{savedforeword}{0}
\setcounter{holder}{0}
\setcounter{savedholder}{0}
\setcounter{introduction}{0}
\setcounter{savedintroduction}{0}
\setcounter{namea}{0}
\setcounter{savednamea}{0}
\setcounter{nameb}{0}
\setcounter{savednameb}{0}
\setcounter{namec}{0}
\setcounter{savednamec}{0}
\setcounter{translator}{0}
\setcounter{savedtranslator}{0}
\setcounter{shortauthor}{0}
\setcounter{savedshortauthor}{0}
\setcounter{shorteditor}{0}
\setcounter{savedshorteditor}{0}
\setcounter{labelname}{0}
\setcounter{savedlabelname}{0}
\setcounter{institution}{0}
\setcounter{savedinstitution}{0}
\setcounter{lista}{0}
\setcounter{savedlista}{0}
\setcounter{listb}{0}
\setcounter{savedlistb}{0}
\setcounter{listc}{0}
\setcounter{savedlistc}{0}
\setcounter{listd}{0}
\setcounter{savedlistd}{0}
\setcounter{liste}{0}
\setcounter{savedliste}{0}
\setcounter{listf}{0}
\setcounter{savedlistf}{0}
\setcounter{location}{0}
\setcounter{savedlocation}{0}
\setcounter{organization}{0}
\setcounter{savedorganization}{0}
\setcounter{origlocation}{0}
\setcounter{savedoriglocation}{0}
\setcounter{origpublisher}{0}
\setcounter{savedorigpublisher}{0}
\setcounter{publisher}{0}
\setcounter{savedpublisher}{0}
\setcounter{language}{0}
\setcounter{savedlanguage}{0}
\setcounter{pageref}{0}
\setcounter{savedpageref}{0}
\setcounter{textcitecount}{0}
\setcounter{textcitetotal}{0}
\setcounter{textcitemaxnames}{0}
\setcounter{biburlnumpenalty}{0}
\setcounter{biburlucpenalty}{0}
\setcounter{biburllcpenalty}{0}
\setcounter{smartand}{1}
\setcounter{bbx:relatedcount}{0}
\setcounter{bbx:relatedtotal}{0}
\setcounter{Item}{2}
\setcounter{Hfootnote}{0}
\setcounter{bookmark@seq@number}{62}
\setcounter{FancyVerbLine}{0}
\setcounter{float@type}{16}
\setcounter{linenumber}{1}
\setcounter{LN@truepage}{39}
\setcounter{FancyVerbLineBreakLast}{0}
\setcounter{minted@FancyVerbLineTemp}{0}
\setcounter{listing}{0}
\setcounter{parentequation}{0}
\setcounter{@todonotes@numberoftodonotes}{55}
\setcounter{ALG@line}{9}
\setcounter{ALG@rem}{0}
\setcounter{ALG@nested}{0}
\setcounter{ALG@Lnr}{2}
\setcounter{ALG@blocknr}{10}
\setcounter{ALG@storecount}{0}
\setcounter{ALG@tmpcounter}{0}
\setcounter{algorithm}{2}
\setcounter{definition}{0}
\setcounter{proposition}{0}
\setcounter{remark}{1}
\setcounter{example}{0}
\setcounter{section@level}{1}
}
